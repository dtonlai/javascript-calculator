[{"/Users/dtl/Documents/GitHub/javascript-calculator/src/index.js":"1","/Users/dtl/Documents/GitHub/javascript-calculator/src/App.js":"2","/Users/dtl/Documents/GitHub/javascript-calculator/src/reportWebVitals.js":"3"},{"size":9600,"mtime":1608603126688,"results":"4","hashOfConfig":"5"},{"size":528,"mtime":1608429815067,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1608603079595,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"1y8ujwr",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/dtl/Documents/GitHub/javascript-calculator/src/index.js",["17","18","19","20","21"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //State\n    this.state = {\n      smallDisplay: '',\n      mainDisplay: '0'\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.clearMainDisplay = this.clearMainDisplay.bind(this);\n    this.clearDisplays = this.clearDisplays.bind(this);\n    this.inputZero = this.inputZero.bind(this);\n    this.inputNumber = this.inputNumber.bind(this);\n    this.inputOperator = this.inputOperator.bind(this);\n    this.inputDecimal = this.inputDecimal.bind(this);\n    this.equals = this.equals.bind(this);\n  }\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  \n  handleKeyPress(event) {\n    console.log(event.keyCode);\n    console.log(String.fromCharCode(event.keyCode));\n  }\n  \n  //Clear main display \n  clearMainDisplay(){\n    this.setState({\n      mainDisplay: ''\n    })  \n  }\n  \n  //Clears both displays\n  clearDisplays() {\n    this.setState({\n      smallDisplay: '',\n      mainDisplay: '0',\n      answer: ''\n    })\n  }\n  \n  //Function to input zeros\n  inputZero() {\n    let zeroStartRegex = /^[0]/;\n    let zeroDecimalStartRegex = /^(0.)/;\n    //If mainDisplay already starts with zero, and does not start with '0.', input zero\n    if (zeroStartRegex.test(this.state.mainDisplay) && !zeroDecimalStartRegex.test(this.state.mainDisplay)) {\n      return;\n    } else {\n      switch(this.state.mainDisplay) {\n        case '+':\n        case '-':\n        case '*':\n        case '/':\n          this.clearMainDisplay();\n          this.setState({\n            smallDisplay: this.state.smallDisplay + this.state.mainDisplay + '0',\n            mainDisplay: '0'\n          });\n          break;\n        default:\n           this.setState({\n            smallDisplay: this.state.smallDisplay + '0',\n            mainDisplay: this.state.mainDisplay + '0'\n          });\n          break;\n        }\n      }\n    }\n  \n  //Function to input numbers\n  inputNumber(event) {\n    let numberValue = document.getElementById(event.target.id).value;\n    //If mainDisplay is showing 0 or operator, clear it and then continue inputting numbers\n    switch(this.state.mainDisplay) {\n      case '0':\n        this.clearMainDisplay();\n        this.setState({\n          mainDisplay: numberValue,\n          smallDisplay: this.state.smallDisplay.slice(0, -1) + numberValue\n        })\n        break;\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n        this.clearMainDisplay();\n        this.setState({\n          mainDisplay: numberValue,\n          smallDisplay: this.state.smallDisplay + this.state.mainDisplay + numberValue\n        });\n        break;\n      default:\n        this.setState({\n          mainDisplay: this.state.mainDisplay + numberValue,\n          smallDisplay: this.state.smallDisplay + numberValue\n        })\n        break;\n      }\n    }\n  \n  //Method to input decimals\n  inputDecimal() {\n    let decimalRegex = /[.]/g;\n    //If mainDisplay does not already have a decimal, input one\n    if (!decimalRegex.test(this.state.mainDisplay)) {\n      switch(this.state.mainDisplay) {\n        //If mainDisplay is only zero, add '.'\n        case '0':\n          this.setState({\n            mainDisplay: this.state.mainDisplay + '.',\n            smallDisplay: this.state.smallDisplay.slice(0, -1) + '0' + '.'\n          });\n          break;\n        //If mainDisplay is showing operator, add '0.' to start decimal\n        case '':\n        case '+':\n        case '-':\n        case '*':\n        case '/':\n          this.clearMainDisplay();\n          this.setState({\n            smallDisplay: this.state.smallDisplay + this.state.mainDisplay + '0.',\n            mainDisplay: '0.'\n          })\n          break;\n        default:\n          console.log(this.state.mainDisplay);\n          this.setState({\n            smallDisplay: this.state.smallDisplay + '.',\n            mainDisplay: this.state.mainDisplay + '.'\n          });\n          break;\n        }\n      }\n    }\n  \n  //Method to input operators, allows to change operator until a number is inputted next\n  /*\n  inputOperator() {\n    let operatorValue = document.getElementById(event.srcElement.id).value;\n    this.clearMainDisplay();\n    if (!operators.includes(this.state.mainDisplay)) {\n      this.setState({\n        mainDisplay: operatorValue\n      })\n    } else {\n      this.setState({\n        mainDisplay: operatorValue\n      })\n    }\n  };\n  */\n  \n  inputOperator(event) {\n    let operatorValue = document.getElementById(event.target.id).value;\n    this.clearMainDisplay();\n    \n    if (this.state.answer != '' && this.state.smallDisplay == '') {\n      this.setState({\n        smallDisplay: this.state.answer + operatorValue\n      })      \n    } else if (!operators.includes(this.state.mainDisplay)) {\n      \n      this.setState({\n        mainDisplay: operatorValue\n      })\n    } else {\n      this.setState({\n        mainDisplay: operatorValue\n      })\n    }\n  };\n  \n  //Method to solve equation when 'equals' is pressed \n  /*\n  equals(numbersArray, operatorsArray) {\n    function operate(operator) {\n      switch(firstNum = 0, secondNum = 0, operator) {\n        case '+':\n          return firstNum + secondNum;\n          break;\n        case '-':\n          return firstNum - secondNum;\n          break;\n      }\n    }\n    return;\n  }\n  */\n  \n  equals() {\n    let answer = eval(this.state.smallDisplay);    \n    this.setState({\n      smallDisplay: '',\n      mainDisplay: answer,\n      answer: answer\n    });\n  }\n  \n  render() {\n    return(\n      <div class='container'>\n        \n        <div id='calculator'>\n          \n          <input id='small-display' style={{gridArea: 'small-display'}} value={this.state.smallDisplay}/>\n          <input id='main-display' style={{gridArea: 'display'}} value={this.state.mainDisplay} />\n          <button id='clear' style={{gridArea: 'clear'}} onClick={this.clearDisplays}>AC</button>\n          <button id='divide' style={{gridArea: 'divide'}} onClick={this.inputOperator} value='/'>/</button>\n          <button id='multiply' style={{gridArea: 'multiply'}} onClick={this.inputOperator} value='*'>X</button>\n          <button id='seven' style={{gridArea: 'seven'}} onClick={this.inputNumber} value='7'>7</button>\n          <button id='eight' style={{gridArea: 'eight'}} onClick={this.inputNumber} value='8'>8</button>\n          <button id='nine' style={{gridArea: 'nine'}} onClick={this.inputNumber} value='9'>9</button>\n          <button id='minus' style={{gridArea: 'minus'}} onClick={this.inputOperator} value='-'>-</button>\n          <button id='four' style={{gridArea: 'four'}} onClick={this.inputNumber} value='4'>4</button>\n          <button id='five' style={{gridArea: 'five'}} onClick={this.inputNumber} value='5'>5</button>\n          <button id='six' style={{gridArea: 'six'}} onClick={this.inputNumber} value='6'>6</button>\n          <button id='plus' style={{gridArea: 'plus'}} onClick={this.inputOperator} value='+'>+</button>\n          <button id='one' style={{gridArea: 'one'}} onClick={this.inputNumber} value='1'>1</button>\n          <button id='two' style={{gridArea: 'two'}} onClick={this.inputNumber} value='2'>2</button>\n          <button id='three' style={{gridArea: 'three'}} onClick={this.inputNumber} value='3'>3</button>\n          <button id='zero' style={{gridArea: 'zero'}} onClick={this.inputZero} value='0'>0</button>\n          <button id='decimal' style={{gridArea: 'decimal'}} onClick={this.inputDecimal} value='.'>.</button>\n          <button id='equals' style={{gridArea: 'equals'}} onClick={this.equals}>=</button>\n\n\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nconst operators = [\n  '+', '-', '*', '/'\n]\n\nconst calculatorKeys = [\n  {\n    keyCode: 12,\n    keyTrigger: 'clear',\n    gridArea: 'clear'\n  },\n  {\n    keyCode: 111,\n    keyTrigger: 'divide',\n    gridArea: 'divide'\n  },\n  {\n    keyCode: 106,\n    keyTrigger: 'multiply',\n    gridArea: 'multiply'\n  },\n  {\n    keyCode: 55,\n    keyTrigger: 'seven',\n    gridArea: 'seven'\n  },\n  {\n    keyCode: 56,\n    keyTrigger: 'eight',\n    gridArea: 'eight'\n  },\n  {\n    keyCode: 57,\n    keyTrigger: 'nine',\n    gridArea: 'nine'\n  },\n  {\n    keyCode: 109,\n    keyTrigger: 'minus',\n    gridArea: 'multiply'\n  },\n  {\n    keyCode: 52,\n    keyTrigger: 'four',\n    gridArea: 'four'\n  },\n  {\n    keyCode: 53,\n    keyTrigger: 'five',\n    gridArea: 'five'\n  },\n  {\n    keyCode: 54,\n    keyTrigger: 'six',\n    gridArea: 'six'\n  },\n  {\n    keyCode: 107,\n    keyTrigger: 'plus',\n    gridArea: 'plus'\n  },\n  {\n    keyCode: 49,\n    keyTrigger: 'one',\n    gridArea: 'one'\n  },\n  {\n    keyCode: 50,\n    keyTrigger: 'two',\n    gridArea: 'two'\n  },\n  {\n    keyCode: 51,\n    keyTrigger: 'three',\n    gridArea: 'three'\n  },\n  {\n    keyCode: 48,\n    keyTrigger: 'zero',\n    gridArea: 'zero',\n  },\n  {\n    keyCode: 110,\n    keyTrigger: 'decimal',\n    gridArea: 'decimal'\n  },\n  {\n    keyCode: 13,\n    keyTrigger: 'equals',\n    gridArea: 'equals'\n  }\n]\nconsole.log('Project complete for now');\nconsole.log('Nice to add - keyboard integration, better styling, hitting empty equals returns undefined - should fix')\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["22","23"],"/Users/dtl/Documents/GitHub/javascript-calculator/src/App.js",[],"/Users/dtl/Documents/GitHub/javascript-calculator/src/reportWebVitals.js",[],["24","25"],{"ruleId":"26","severity":1,"message":"27","line":123,"column":70,"nodeType":"28","messageId":"29","endLine":123,"endColumn":71},{"ruleId":"30","severity":1,"message":"31","line":170,"column":27,"nodeType":"28","messageId":"32","endLine":170,"endColumn":29},{"ruleId":"30","severity":1,"message":"33","line":170,"column":60,"nodeType":"28","messageId":"32","endLine":170,"endColumn":62},{"ruleId":"34","severity":1,"message":"35","line":204,"column":18,"nodeType":"36","messageId":"32","endLine":204,"endColumn":22},{"ruleId":"37","severity":1,"message":"38","line":250,"column":7,"nodeType":"39","messageId":"40","endLine":250,"endColumn":21},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"45"},{"ruleId":"43","replacedBy":"46"},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","Expected '===' and instead saw '=='.","no-eval","eval can be harmful.","CallExpression","no-unused-vars","'calculatorKeys' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["47"],"no-negated-in-lhs",["48"],["47"],["48"],"no-global-assign","no-unsafe-negation"]